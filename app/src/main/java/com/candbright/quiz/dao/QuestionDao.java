package com.candbright.quiz.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;

import com.candbright.quiz.model.data.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION".
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Difficulty = new Property(1, int.class, "difficulty", false, "DIFFICULTY");
        public final static Property Subject = new Property(2, String.class, "subject", false, "SUBJECT");
        public final static Property Question = new Property(3, String.class, "question", false, "QUESTION");
        public final static Property Answers = new Property(4, String.class, "answers", false, "ANSWERS");
        public final static Property AnswerType = new Property(5, String.class, "answerType", false, "ANSWER_TYPE");
        public final static Property Answer = new Property(6, String.class, "answer", false, "ANSWER");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
    }

    private final StringConverter answersConverter = new StringConverter();

    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DIFFICULTY\" INTEGER NOT NULL ," + // 1: difficulty
                "\"SUBJECT\" TEXT," + // 2: subject
                "\"QUESTION\" TEXT," + // 3: question
                "\"ANSWERS\" TEXT," + // 4: answers
                "\"ANSWER_TYPE\" TEXT," + // 5: answerType
                "\"ANSWER\" TEXT," + // 6: answer
                "\"DESCRIPTION\" TEXT);"); // 7: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDifficulty());
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(3, subject);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(4, question);
        }
 
        List answers = entity.getAnswers();
        if (answers != null) {
            stmt.bindString(5, answersConverter.convertToDatabaseValue(answers));
        }
 
        String answerType = entity.getAnswerType();
        if (answerType != null) {
            stmt.bindString(6, answerType);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(7, answer);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDifficulty());
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(3, subject);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(4, question);
        }
 
        List answers = entity.getAnswers();
        if (answers != null) {
            stmt.bindString(5, answersConverter.convertToDatabaseValue(answers));
        }
 
        String answerType = entity.getAnswerType();
        if (answerType != null) {
            stmt.bindString(6, answerType);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(7, answer);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // difficulty
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subject
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // question
            cursor.isNull(offset + 4) ? null : answersConverter.convertToEntityProperty(cursor.getString(offset + 4)), // answers
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // answerType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // answer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDifficulty(cursor.getInt(offset + 1));
        entity.setSubject(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQuestion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAnswers(cursor.isNull(offset + 4) ? null : answersConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setAnswerType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnswer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Question entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
